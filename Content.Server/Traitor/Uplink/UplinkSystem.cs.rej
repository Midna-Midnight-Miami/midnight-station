diff a/Content.Server/Traitor/Uplink/UplinkSystem.cs b/Content.Server/Traitor/Uplink/UplinkSystem.cs	(rejected hunks)
@@ -5,12 +5,14 @@
 using Content.Shared.FixedPoint;
 using Content.Shared.Store;
 using Content.Shared.Store.Components;
+using Robust.Shared.Prototypes;
 
 namespace Content.Server.Traitor.Uplink
 {
     public sealed class UplinkSystem : EntitySystem
     {
         [Dependency] private readonly InventorySystem _inventorySystem = default!;
+        [Dependency] private readonly IEntityManager _entityManager = default!;
         [Dependency] private readonly SharedHandsSystem _handsSystem = default!;
         [Dependency] private readonly StoreSystem _store = default!;
 
@@ -22,10 +24,11 @@ public sealed class UplinkSystem : EntitySystem
         /// </summary>
         /// <param name="user">The person who is getting the uplink</param>
         /// <param name="balance">The amount of currency on the uplink. If null, will just use the amount specified in the preset.</param>
-        /// <param name="uplinkPresetId">The id of the storepreset</param>
+        /// <param name="currencyProtoId">Id of the currency the store uses. If null, uses Telecrystal</param>
+        /// <param name="storePreset">If set to a value, will clear the original preset and replace it with this one.</param>
         /// <param name="uplinkEntity">The entity that will actually have the uplink functionality. Defaults to the PDA if null.</param>
         /// <returns>Whether or not the uplink was added successfully</returns>
-        public bool AddUplink(EntityUid user, FixedPoint2? balance, EntityUid? uplinkEntity = null)
+        public bool AddUplink(EntityUid user, FixedPoint2? balance, EntProtoId? currencyProtoId, EntProtoId? storePreset, EntityUid? uplinkEntity = null)
         {
             // Try to find target item
             if (uplinkEntity == null)
@@ -35,14 +38,30 @@ public bool AddUplink(EntityUid user, FixedPoint2? balance, EntityUid? uplinkEnt
                     return false;
             }
 
+            if (storePreset != null && HasComp<StoreComponent>(uplinkEntity.Value))
+            {
+                EnsureComp<StoreComponent>(uplinkEntity.Value, out var uplinkPdaStore);
+
+                var ent = Spawn(storePreset);
+                if (!TryComp<StoreComponent>(ent, out var comp))
+                    return false;
+
+                uplinkPdaStore.Categories = comp.Categories;
+                uplinkPdaStore.CurrencyWhitelist = comp.CurrencyWhitelist;
+                uplinkPdaStore.Name = comp.Name;
+                uplinkPdaStore.RefundAllowed = comp.RefundAllowed;
+
+                QueueDel(ent);
+            }
+
             EnsureComp<UplinkComponent>(uplinkEntity.Value);
-            var store = EnsureComp<StoreComponent>(uplinkEntity.Value);
+            var store = EnsureComp<StoreComponent>(uplinkEntity.Value); // so this is why every pda has StorePresetUplink
             store.AccountOwner = user;
             store.Balance.Clear();
             if (balance != null)
             {
                 store.Balance.Clear();
-                _store.TryAddCurrency(new Dictionary<string, FixedPoint2> { { TelecrystalCurrencyPrototype, balance.Value } }, uplinkEntity.Value, store);
+                _store.TryAddCurrency(new Dictionary<string, FixedPoint2> { { currencyProtoId ?? TelecrystalCurrencyPrototype, balance.Value } }, uplinkEntity.Value, store);
             }
 
             // TODO add BUI. Currently can't be done outside of yaml -_-
@@ -50,6 +69,11 @@ public bool AddUplink(EntityUid user, FixedPoint2? balance, EntityUid? uplinkEnt
             return true;
         }
 
+        public bool AddUplink(EntityUid user, FixedPoint2? balance, EntityUid? uplinkEntity = null)
+        {
+            return AddUplink(user, balance, null, null, uplinkEntity);
+        }
+
         /// <summary>
         /// Finds the entity that can hold an uplink for a user.
         /// Usually this is a pda in their pda slot, but can also be in their hands. (but not pockets or inside bag, etc.)
