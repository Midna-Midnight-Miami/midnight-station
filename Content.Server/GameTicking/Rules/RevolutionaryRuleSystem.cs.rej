diff a/Content.Server/GameTicking/Rules/RevolutionaryRuleSystem.cs b/Content.Server/GameTicking/Rules/RevolutionaryRuleSystem.cs	(rejected hunks)
@@ -34,6 +34,8 @@
 using System.Threading;
 using Content.Shared.Chat;
 using Content.Server.Chat.Systems;
+using Content.Server.PDA.Ringer;
+using Content.Server.Traitor.Uplink;
 using Content.Shared.Changeling;
 using Content.Shared.Heretic;
 
@@ -70,6 +74,7 @@ public override void Initialize()
         base.Initialize();
         SubscribeLocalEvent<CommandStaffComponent, MobStateChangedEvent>(OnCommandMobStateChanged);
         SubscribeLocalEvent<HeadRevolutionaryComponent, MobStateChangedEvent>(OnHeadRevMobStateChanged);
+        SubscribeLocalEvent<RevolutionaryRuleComponent, AfterAntagEntitySelectedEvent>(AfterEntitySelected);
         SubscribeLocalEvent<RevolutionaryRoleComponent, GetBriefingEvent>(OnGetBriefing);
         SubscribeLocalEvent<HeadRevolutionaryComponent, AfterFlashedEvent>(OnPostFlash);
         SubscribeLocalEvent<ShuttleDockAttemptEvent>(OnTryShuttleDock); // Funky Station - HE- HE- HELL NAW
@@ -81,6 +86,35 @@ protected override void Started(EntityUid uid, RevolutionaryRuleComponent compon
         component.CommandCheck = _timing.CurTime + component.TimerWait;
     }
 
+    private void AfterEntitySelected(Entity<RevolutionaryRuleComponent> ent, ref AfterAntagEntitySelectedEvent args)
+    {
+        MakeHeadRevolutionary(args.EntityUid, ent);
+    }
+
+    /// <summary>
+    /// (Funky Station) Adds a revolutionary uplink to HRevs. Makes midround HRevs less awkward,
+    /// now that they aren't dropping their fucking kit in the middle of security.
+    /// </summary>
+    /// <returns>true if uplink was successfully added.</returns>
+    private bool MakeHeadRevolutionary(EntityUid traitor, RevolutionaryRuleComponent component)
+    {
+        if (!_mind.TryGetMind(traitor, out var mindId, out var mind))
+            return false;
+
+        var pda = _uplink.FindUplinkTarget(traitor);
+        if (pda == null || !_uplink.AddUplink(traitor, component.StartingBalance, null, component.UplinkStoreId))
+            return false;
+
+        var code = EnsureComp<RingerUplinkComponent>(pda.Value).Code;
+
+        _antag.SendBriefing(traitor, Loc.GetString("head-rev-role-greeting"), Color.Red, null);
+
+        if (_role.MindHasRole<RevolutionaryRoleComponent>(mindId, out var revRoleComp))
+            AddComp(revRoleComp.Value, new RoleBriefingComponent { Briefing = Loc.GetString("head-rev-briefing", ("code", string.Join("-", code).Replace("sharp", "#"))) }, overwrite: true);
+
+        return true;
+    }
+
     protected override void ActiveTick(EntityUid uid, RevolutionaryRuleComponent component, GameRuleComponent gameRule, float frameTime)
     {
         base.ActiveTick(uid, component, gameRule, frameTime);
